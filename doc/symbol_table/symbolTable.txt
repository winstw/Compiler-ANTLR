@startuml

enum Type {
    VOID
    INTEGER
    BOOLEAN
    CHARACTER
    STRUCT
    STRING
}

interface SlipSymbol {
    +String getName()
    +String getType()
    +boolean isAssignable()
    +SlipSymbol clone()
}

abstract class SlipBaseSymbol {
    -String name
    -Type type
    -boolean isAssignable
}

class SlipVariableSymbol {
    -String value

    +void setValue(Object value)
    +Object getValue()
}

class SlipArraySymbol {
    -String[][] value

    +void setValue(List<Integer> indexes, Object value)
    +Object getValue(List<Integer> indexes)
}

interface SlipScope {
    +String getName()
    +void define(SlipSymbol symbol)
    +SlipSymbol resolve(String name)
    +SlipScope getParentScope()
}

abstract class SlipBaseScope {
    -String name
    -SlipScope parentScope
    -Map<String, SlipSymbol> symbols
}

abstract class SlipScopedSymbol {
    -Type type
    -boolean isAssignable
}

class SlipMethodSymbol {
    -ArrayList<SlipVariableSymbol> parameters
    -List<SlipParser.InstBlockContext> body;

    +void addParameter(SlipVariableSymbol symbol)
    +int getNumberOfParameters()
    +Iterator<SlipVariableSymbol> getParameters()
    +void setBody(List<SlipParser.InstBlockContext> body)
    +List<SlipParser.InstBlockContext> getBody()
}

class SlipStructureSymbol
class SlipGlobalScope


SlipSymbol <|-- SlipBaseSymbol
SlipSymbol <|-- SlipScopedSymbol

SlipScope <|-- SlipBaseScope

SlipBaseSymbol <|-- SlipVariableSymbol
SlipBaseSymbol <|-- SlipArraySymbol

SlipBaseScope <|-- SlipScopedSymbol
SlipBaseScope <|-- SlipGlobalScope

SlipScopedSymbol <|-- SlipMethodSymbol
SlipScopedSymbol <|-- SlipStructureSymbol

SlipBaseScope "[0-N] child scope" -- "[0-1] parent scope" SlipScope: englobedBy >

@enduml
