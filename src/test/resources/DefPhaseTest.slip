#import "file.map"

intArray as integer[5, 5];
boolArray as boolean[5, 5];
charArray as char[5, 5];
b as boolean;
main as function(): void
do

    intArray[2, 1] := 5;
    boolArray[4, 3] := true;
    charArray[2, 1] := 'c';
    b := boolArray[4, 4];
    right(intArray[2, 1]);
    up(2);
    up(2);
    left(2);
    left(2);
    dig();

end

// #import "file.map"

// intArray as integer[5];
// boolArray as boolean[5];
// charArray as char[5];
// b as boolean;

// fun as function(): integer
// do
//   fun := 3;
// end

// main as function(): void
// do

//     intArray[fun()] := 5;
//     boolArray[2 + 2] := true;
//     b := boolArray[4];
//     charArray[2] := 'c';
//     dig();

// end

// #import "file.map"

// main as function(): void
// do
//   i as integer;
//   j as integer;
//   k as integer = 0;

//   repeat
//      i:= 0;
//     while(i < 3)
//     do
//       for j := 1 to (j < 5)
//         do
//           right();
//         end
//       left();
//       i := i + 1;
//       k := k + i;
//     end
//     until (k < 30)
//   end

//   dig();
// end


// #import "file.map"
// main as function(): void
// do
//   i as integer = 0;
//   while (i < 2)
//   do
//      right();
//     left();
//     i := i + 1;
//   end
//   dig();
// end

// #import "file.map"
// i as integer;

// main as function(): void
// do
//   for i:= 1 to (i < 5)
//   do
//     right();
//   end
//   dig();
// end


// #import "file.map"

// j as integer;

// main as function(): void
// do
//   j := 0;
//   repeat
//     j := j + 1;
//     until (j < 20)
//   end
//   dig();
// end

// #import "file.map"

// b as boolean;

// main as function(): void
// do
//   b := true;
//   if (b) then
//     right();
//   else
//     left();
//   end
//   dig();
// end

// #import "file.map"

// add as function(variable as integer): integer
// do
//     add := 5;
// end

// x as integer = 5;

// main as function(): void
// do

//     result as integer;
//     result := 5 % 3;
//     result := x % add(5);
//     result := 100 % (3 + x);
//     result := 100 % result;
//     result := 100 % x;

//     dig();

// end

// #import "file.map"

// add as function(variable as integer): integer
// do
//     add := 5;
// end

// x as integer = 5;

// main as function(): void
// do

//     result as integer;
//     result := 5 / 3;
//     result := x / add(5);
//     result := 100 / (5 + x);
//     result := 100 / result;
//     result := 100 / x;

//     dig();

// end
// #import "file.map"

//  min as integer;

// add as function(a as integer, b as integer): integer
// do
//   if (b = 0) then
//     add := a;
//   else
//     add := add(a + 1, b - 1);
//   end
// end

// main as function(): void
// do
//   min := add(2 - 1, 3);
//   dig();
// end


 // min as boolean;
// main as function(): void
// do
//     if (false) then
//       min := true;
//       else
//       min := false;
//     end
//     dig();
// end


// #import "file.map"

// ok as boolean = true;
//  const ko as boolean = false;
//  test as boolean = true and true;
//  // test := true and false;
//  min as boolean;

// fun as function(a as boolean): boolean
// do
//   hello as boolean;
//   hello := not a;
//   fun := hello;
// end

// main as function(): void
// do
//     test := true and false;

//     // test := ko;
//     if (false) then
//     min := fun(true);
//     end
//     test := fun(fun(fun(false)));
//     dig();

// end


// #import "recur.map"

// add as function(a as integer, b as integer): integer
// do
//   if (b = 0) then
//     add := a;
//   else
//     add := add(a + 1, b - 1)
//   end
// end

// main as function(): void
// do
//   dig();
// end

// #import "what.map"

// b as boolean = true;

// main as function(): void
// do
//   if (true) then
//     do
//       right();
//     end
//   else
//   do
//     left();
//   end
//   dig();
// end

// // #import "what.map"

// const hello as integer := 3;

// main as function(): void
// do
//   dig();
// end


// /* Test */

// #import "world.map"

//     v1 as boolean;
//     i as integer;
//     s as char;

// main as function():void
// do
// i := 5;
// down(5);
// fight();

// dig();

// end

// #import "world.map"

//     z as integer;
//     f as integer;

// facto as function(x as integer):integer
// do

//  if((x < 0) or (x = 0)) then
//    facto := 1;
//   else
//    facto := x * facto(x - 1);
//   end

// end

// x as integer;

// main as function():void
// do
//    x := 5;
//    z := facto(x);

//    if (not(z = (5*4*3*2*1))) then
//        right(5);
//    end

//    dig();

//  end

// #import "world.map"

// f1 as integer;

//  fct1 as function():integer
//     do
//      f1 := 42;
//      fct1 := f1;
//     end

// main as function():void
// do
//    if(fct1() <> 42) then
//    	 left();
//    end
//    dig();
// end

// #import "world.map"
// const a as integer;
// const dzeta as integer[2, 3];
// beta as integer[2, 3];

// main as function(): void
// do
//     a := 3;
//     dzeta[2] := 3;
//     beta[2, 2] := 3;
//     dig();
// end



// #import "file.map"

// x as integer = 1;
// y as integer = 3;
// z as integer;
// //z := 2;
// const isTrue as boolean = true;
// isFalse as boolean = 2;
// isFalse as boolean = true;
// // add as integer;

// emil, geoffroy, jb as record
//     age as integer;
//     town as integer;
//     age as char;
// end;

// add as function(a, b as integer): integer
// do
//     test as record
//         age as integer;
//         town as integer;
//     end;

//     result as integer;
//     result := a + b;
//     result as boolean;
//     result := true;
// end

// fct as function(blabla as integer): void
// do
//     blabla := 4;
// end

// check as function(a, b as boolean): boolean
// do
//     result as boolean;
//     result := a or b;
// end

// main as function(): void
// do
//     sum as integer = true;
//     coucou := add(x, y);

//     isFalse := check(x, true);

//     if (not (x + y))
//     then
//         x := x;
//     end
    
//     myBool as boolean;
// //    myBool := check(isTrue, isFalse);
//     myBool := chock(isTrue, not isFalse);

//     dig();
// end


// #import "world.map"

//     v1 as boolean[1];
//     s as char;
//     v2 as boolean[5,7];
//     v3 as integer[2,3];
//     v4 as integer[5];
//     i as integer;
//     v5 as char[5, 7];
//     b as boolean;
//     v6 as char[5,2];
//     const LightThreshold as integer = 40;

//      D2 as record
//                 a as integer[5];
//                 b as char;
//                 c as boolean[5,3];
//       end;

//      D3 as record
//            a as integer[5];
//            b as char;
//            c as boolean[5,3];
//       end;

// main as function():void
// do

// D2.a[0] := 1;
// D2.b := 'a';
// D2.c[0,1] := true;
// left(D2.a[0]);
// right(3);

// dig();

// end

// map: 5 3
//  A P G G _
//  G G G B G
//  A G G G G